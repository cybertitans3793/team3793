// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3793.RobotBld;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType; import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.smartdashboard.*;

import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController drivetrainRightRear;
    public static SpeedController drivetrainLeftRear;
    public static Encoder drivetrainQuadEncRight;
    public static SpeedController drivetrainRightFront;
    public static PIDController drivetrainPIDControllerR;
    public static SpeedController drivetrainLeftFront;
    public static Encoder drivetrainQuadEncLeft;
    public static PIDController drivetrainPIDControllerL;
    public static Compressor clawCompressor1;
    public static Solenoid clawSolenoid1;
    public static SpeedController pulleyPulley;
    public static Ultrasonic sensorUltrasonic1;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainRightRear = new Victor(1);
        LiveWindow.addActuator("Drivetrain", "RightRear", (Victor) drivetrainRightRear);
        
        drivetrainLeftRear = new Victor(3);
        LiveWindow.addActuator("Drivetrain", "LeftRear", (Victor) drivetrainLeftRear);
        
        drivetrainQuadEncRight = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "QuadEncRight", drivetrainQuadEncRight);
        drivetrainQuadEncRight.setDistancePerPulse(1.0);
        drivetrainQuadEncRight.setPIDSourceParameter(PIDSourceParameter.kRate);
        drivetrainRightFront = new Victor(0);
        LiveWindow.addActuator("Drivetrain", "RightFront", (Victor) drivetrainRightFront);
        
        drivetrainPIDControllerR = new PIDController(1.0, 0.0, 0.0, 0.0, drivetrainQuadEncRight, drivetrainRightFront, 0.02);
        LiveWindow.addActuator("Drivetrain", "PIDControllerR", drivetrainPIDControllerR);
        drivetrainPIDControllerR.setContinuous(false); drivetrainPIDControllerR.setAbsoluteTolerance(0.2); 
        drivetrainPIDControllerR.setOutputRange(-1.0, 1.0);        

        drivetrainLeftFront = new Victor(2);
        LiveWindow.addActuator("Drivetrain", "LeftFront", (Victor) drivetrainLeftFront);
        
        drivetrainQuadEncLeft = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("Drivetrain", "QuadEncLeft", drivetrainQuadEncLeft);
        drivetrainQuadEncLeft.setDistancePerPulse(1.0);
        drivetrainQuadEncLeft.setPIDSourceParameter(PIDSourceParameter.kRate);
        drivetrainPIDControllerL = new PIDController(1.0, 0.0, 0.0, 0.0, drivetrainQuadEncLeft, drivetrainLeftFront, 0.02);
        LiveWindow.addActuator("Drivetrain", "PIDControllerL", drivetrainPIDControllerL);
        drivetrainPIDControllerL.setContinuous(false); drivetrainPIDControllerL.setAbsoluteTolerance(0.2); 
        drivetrainPIDControllerL.setOutputRange(-1.0, 1.0);        

        clawCompressor1 = new Compressor(0);
        
        
        clawSolenoid1 = new Solenoid(0, 0);
        LiveWindow.addActuator("Claw", "Solenoid 1", clawSolenoid1);
        
        pulleyPulley = new Victor(4);
        LiveWindow.addActuator("Pulley", "Pulley", (Victor) pulleyPulley);
        
        sensorUltrasonic1 = new Ultrasonic(4, 5);
        LiveWindow.addSensor("Sensor", "Ultrasonic 1", sensorUltrasonic1);
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
